// Generated by CoffeeScript 1.9.2
var RAF, _now_t0, byId, doc, elem, fade_in, fade_out, get_canvas_dim, hide, listenOn, log, mk_blob, now, setStyles, show, volume_fade, win;

win = window;

doc = document;

log = function() {
  var child;
  log = doc.getElementById('log');
  child = log.insertBefore(log.lastChild, log.firstChild);
  return child.textContent = Array.prototype.join.call(arguments, ", ");
};

now = (function() {
  if (win.performance) {
    return (function() {
      return performance.now();
    });
  }
  if (Date.now) {
    return (function() {
      return Date.now();
    });
  }
  return (function() {
    return +new Date() - (_now_t0 || 0);
  });
})();

_now_t0 = now();

RAF = win.requestAnimationFrame || win.mozRequestAnimationFrame || win.webkitRequestAnimationFrame || win.msRequestAnimationFrame || function(cb) {
  return win.setTimeout(cb, 16.6667);
};

mk_blob = function(len) {
  var blob, i, j, ref;
  len = len || 16;
  blob = [];
  for (i = j = ref = Math.round(len / 16) + 2; j >= 0; i = j += -1) {
    blob.push(Math.random().toString(36).split(".")[1]);
  }
  return blob.join("").slice(0, len);
};

get_canvas_dim = function() {
  var dim;
  dim = Math.min(win.innerWidth, win.innerHeight);
  return Math.floor(dim / 128) * 128;
};

byId = function(id) {
  return doc.getElementById(id);
};

elem = function(id_or_elem) {
  if (typeof id_or_elem === "string") {
    return byId(id_or_elem);
  }
  return id_or_elem;
};

show = function(id_or_elem) {
  elem(id_or_elem).style['display'] = "block";
};

hide = function(id_or_elem) {
  elem(id_or_elem).style['display'] = "none";
};

setStyles = function(id_or_elem, styles) {
  var e, k;
  e = elem(id_or_elem);
  for (k in styles) {
    e.style[k] = styles[k];
  }
};

listenOn = function(selector, event_name, callback) {
  var elems, i, j, ref;
  elems = doc.querySelectorAll(selector);
  for (i = j = 0, ref = elems.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    elems[i].addEventListener(event_name, callback);
  }
};

volume_fade = function(audio_node, target_volume, duration, steps) {
  var limit_fn, start_volume, step, step_fn;
  if (steps == null) {
    steps = 8;
  }
  start_volume = audio_node.volume;
  step = (target_volume - start_volume) / steps;
  limit_fn = step < 0 ? Math.max : Math.min;
  step_fn = function() {
    audio_node.volume = limit_fn(audio_node.volume + step, target_volume);
    if (audio_node.volume === target_volume) {
      return;
    }
    return setTimeout(step_fn, duration / steps);
  };
  step_fn();
};

fade_out = function(audio_node, duration) {
  if (duration == null) {
    duration = 2000;
  }
  return volume_fade(audio_node, 0, duration);
};

fade_in = function(audio_node, duration) {
  if (duration == null) {
    duration = 2000;
  }
  return volume_fade(audio_node, 1, duration);
};

Math.clamp = function(val, min, max) {
  return Math.min(Math.max(val, min), max);
};
