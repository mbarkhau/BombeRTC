// Generated by CoffeeScript 1.9.2
var byId, dev_resources, doc, prod_resources, resource_nodes;

dev_resources = ["/assets/music/intro.opus", "/assets/music/game_game.opus", "/assets/music/lava_city.opus", "/assets/Bomb.png", "/app/game.js", "/app/menu.js", "/app/app.js", "/lib/util.js", "/lib/kson.js", "/lib/mithril.js", "/style/menu.css", "/style/layout.css", "/style/loading.css", "/style/reset.css"];

prod_resources = ["/assets/music/intro.opus", "/assets/music/game_game.opus", "/assets/music/lava_city.opus", "/assets/Bomb.png", "/app/app.min.js", "/lib/util.js", "/lib/kson.min.js", "//cdnjs.cloudflare.com/ajax/libs/mithril/0.2.0/mithril.min.js", "/style/menu.css", "/style/layout.css", "/style/loading.css"];

resource_nodes = {};

doc = document;

byId = function(id) {
  return doc.getElementById(id);
};

window.onload = function() {
  var i, len, mk_load_cb, name, node, parts, path, progress, resource_paths, resourcesNode, results, start, type;
  start = Date.now();
  progress = byId("progress");
  resourcesNode = byId("resources");
  resource_paths = dev_resources;
  mk_load_cb = function(path, node) {
    return function() {
      var progressElem;
      progressElem = doc.createElement("div");
      progressElem.innerText = path;
      progress.insertBefore(progressElem, progress.firstChild);
      if (progress.childNodes.length === resource_paths.length) {
        app.main.init();
      }
    };
  };
  results = [];
  for (i = 0, len = resource_paths.length; i < len; i++) {
    path = resource_paths[i];
    parts = path.split("/").slice(-1)[0].split(".");
    name = parts[0];
    type = parts.slice(-1)[0];
    switch (type) {
      case 'js':
        node = doc.createElement("script");
        node.src = path;
        node.onload = mk_load_cb(path, node);
        resourcesNode.appendChild(node);
        break;
      case 'css':
        node = doc.createElement("link");
        node.rel = "stylesheet";
        node.type = "text/css";
        node.href = path;
        node.onload = mk_load_cb(path, node);
        resourcesNode.appendChild(node);
        break;
      case 'jpg':
      case 'png':
        node = new Image();
        node.src = path;
        node.onload = mk_load_cb(path, node);
        break;
      case 'opus':
      case 'mp3':
      case 'ogg':
        node = new Audio();
        node.src = path;
        node.preload = true;
        node.addEventListener('canplaythrough', mk_load_cb(path, node));
    }
    results.push(resource_nodes[name] = node);
  }
  return results;
};
